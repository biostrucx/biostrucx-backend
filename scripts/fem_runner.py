# scripts/fem_runner.py
# Bucle que llama a build_beam_viz() y guarda en Mongo las colecciones:
#   - simulation_result (documento con viz para el viewer)
#   - simulation_ts     (serie con fem_mm para el gráfico 1)

import os
import time
from datetime import datetime
from pymongo import MongoClient, UpdateOne
from fem_beam import build_beam_viz

MONGODB_URI = os.environ.get("MONGODB_URI") or os.environ.get("mongodb_uri")
MONGODB_DB  = os.environ.get("MONGODB_DB", "biostrucx")
CLIENTS     = [c.strip() for c in os.environ.get("FEM_CLIENTS", "jeimie").split(",") if c.strip()]
INTERVAL    = int(os.environ.get("FEM_INTERVAL_SEC", "120"))

def run_once():
    if not MONGODB_URI:
        raise RuntimeError("MONGODB_URI no está definido")

    cli = MongoClient(MONGODB_URI, connectTimeoutMS=15000, serverSelectionTimeoutMS=15000)
    db  = cli[MONGODB_DB]
    col_result = db["simulation_result"]
    col_ts     = db["simulation_ts"]

    now = datetime.utcnow()

    ops_ts = []
    for clientid in CLIENTS:
        viz = build_beam_viz()

        # midspan en mm para el gráfico
        fem_mm = abs(viz["marker"][1]) * 1000.0

        doc = {
            "clientid": clientid,
            "status": "done",
            "ts": now,
            "model": {"type": "beam_uniform_load", "units": "SI"},
            "params": {"note": "generated by fem_runner.py"},
            "viz": viz
        }

        # upsert del resultado “latest” por clientid (si usas otro criterio, ajústalo)
        col_result.update_one(
            {"clientid": clientid},
            {"$set": doc},
            upsert=True
        )

        # inserta un punto en la serie
        ops_ts.append(
            UpdateOne(
                {"_id": None},  # placeholder para usar ordered=False
                {"$set": {"clientid": clientid, "ts": now, "fem_mm": fem_mm}},
                upsert=False
            )
        )

        # mejor: inserta directo (más simple/legible)
        col_ts.insert_one({"clientid": clientid, "ts": now, "fem_mm": fem_mm})

    cli.close()

if __name__ == "__main__":
    print(f"[fem_runner] clients={CLIENTS} interval={INTERVAL}s")
    while True:
        try:
            run_once()
            print("[fem_runner] tick OK", datetime.utcnow().isoformat())
        except Exception as e:
            print("[fem_runner] ERROR:", repr(e))
        time.sleep(INTERVAL)

